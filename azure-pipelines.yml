# Go
# Build your Go project.
# Add steps that test, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/go

trigger:
- master

pool:
  vmImage: 'windows-latest'
variables:
  buildPlatform: 'x64'
  buildConfiguration: 'release'
  major: 1
  minor: 0
  build: $(Date:yyyyMMdd)
  revision: $[counter('rev', 0)]

name: $(Date:yyyyMMdd)$(Rev:.r)
steps: 
- task: GoTool@0
  inputs:
    version: '1.13.5'
- task: Go@0
  inputs:
    command: 'get'
    arguments: '-d'
    workingDirectory: '$(System.DefaultWorkingDirectory)'
- task: Go@0
  inputs:
    command: 'build'
    arguments: '-o $(Build.ArtifactStagingDirectory)\gomeme.exe'
    workingDirectory: '$(System.DefaultWorkingDirectory)'
- task: Go@0
  inputs:
    command: 'test'
    arguments: '-v ./...'
    workingDirectory: '$(System.DefaultWorkingDirectory)'
- task: CopyFiles@2
  inputs:
    contents: |
      images\**
      appxmanifest.xml
      gomeme.appinstaller
      frigocorp.cer
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
- task: PublishBuildArtifacts@1
  inputs:
     artifactName: drop
- powershell: |
   $newVersion = "$(major).$(minor).42.$(revision)";
   [Reflection.Assembly]::LoadWithPartialName("System.Xml.Linq")
   $path = "$(Build.ArtifactStagingDirectory)\appxmanifest.xml"
   $doc = [System.Xml.Linq.XDocument]::Load($path)
   $xName =      [System.Xml.Linq.XName]"{http://schemas.microsoft.com/appx/manifest/foundation/windows10}Identity"
   $doc.Root.Element($xName).Attribute("Version").Value = $newVersion;
   $doc.Save($path)
   $path = "$(Build.ArtifactStagingDirectory)\gomeme.appinstaller"
   $doc = [System.Xml.Linq.XDocument]::Load($path)
   $xName =      [System.Xml.Linq.XName]"{http://schemas.microsoft.com/appx/appinstaller/2018}MainPackage"
   $doc.Root.Element($xName).Attribute("Version").Value = $newVersion;
   $doc.Save($path)
  displayName: 'Version Package Manifest'
- script: '"C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x64\makeappx" 
    pack /v /h SHA256 /d $(Build.ArtifactStagingDirectory) /p $(Build.ArtifactStagingDirectory)\gomemepkg.msix'
  displayName: 'Package the App'
- task: DownloadSecureFile@1
  inputs:
    secureFile: 'frigocorp.pfx'
  displayName: 'Download Secure PFX File'
- script: '"C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x64\signtool"
    sign /fd SHA256 /f $(Agent.TempDirectory)/frigocorp.pfx /p toto $(Build.ArtifactStagingDirectory)\gomemepkg.msix'
  displayName: 'Sign MSIX Package'
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/master'))
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
- task: GithubRelease@0
  displayName: 'Create GitHub Release'   
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/master'))
  inputs:
    tagSource: manual
    tag: v$(major).$(minor).$(revision)
    gitHubConnection: github.com_freedge
    repositoryName: freedge/gomeme
    assets: |
      $(Build.ArtifactStagingDirectory)/*.msix
      $(Build.ArtifactStagingDirectory)/*.cer
      $(Build.ArtifactStagingDirectory)/*.appinstaller
- task: Kubernetes@1
  displayName: kubectl apply
  inputs:
    connectionType: Kubernetes Service Connection
    kubernetesServiceEndpoint: Openshift
    command: apply
    arguments: -v 42 -f winstore\httpd.yaml -n freedge-demo 
